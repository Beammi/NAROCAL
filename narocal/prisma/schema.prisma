// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  schemas           = ["public"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// enum Role{
//   VENDOR
//   CUSTOMER
//   ADMIN
//   @@schema("public")

// }

model User {
  id              Int     @id @default(autoincrement())
  firstname       String?
  lastname        String?    
  customerProfile CustomerProfile?
  vendorProfile   VendorProfile?
  role            String            
  email           String          
  address         String?
  @@schema("public") // or @@schema("public")
}

model CustomerProfile {
  id     Int    @id @default(autoincrement())
  bio    String?
  image  String?
  order  Order[]
  payment Payment[]
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  @@schema("public")
}

model VendorProfile{
  id          Int    @id @default(autoincrement())
  bio         String?
  image       String?
  shpRate     Int
  // languages Language[]
  languages   String[]
  currencies  Currency[]
  user        User   @relation(fields: [userId], references: [id])
  userId      Int    @unique
  products    Product[]
  payment     Payment[]
  order       Order[]
  rating      Int?
  @@schema("public")
}

model Currency{
  id          Int             @id @default(autoincrement())
  currency    String
  rate        Float
  vendor      VendorProfile   @relation(fields: [vendorId], references: [id])
  vendorId    Int             
  @@schema("public")
}

model Order {
  id          Int       @id @default(autoincrement())
  name        String
  customerId  Int
  vendorId    Int
  status      String
  contact     String
  shipment    Shipment?
  price       Float
  updatedAt   DateTime @default(now())
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  vendor      VendorProfile   @relation(fields: [vendorId], references: [id])
  @@schema("public")
}

model Shipment{
  id              Int     @id @default(autoincrement())
  vendorAddress   String
  customerAddress String
  vendorContact   String
  customerContact String
  trackingNo      String
  order           Order   @relation(fields: [shipId], references: [id])
  shipId          Int     @unique
  createdAt       DateTime @default(now())
  @@schema("public")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  brand       String
  category    String
  subCategory String?
  city        String?
  country     String
  image       String?
  price       Float
  code        String?
  model       String
  color       String?
  gender      String?
  createdAt   DateTime  @default(now())
  // published   Boolean   @default(false)
  author      VendorProfile?   @relation(fields: [authorId], references: [id])
  authorId    Int
  @@schema("public")
}

model Payment{
  id  Int @id @default(autoincrement())
  status   String
  updatedAt DateTime @default(now())
  customer CustomerProfile  @relation(fields: [cusPayId], references: [id])
  vendor   VendorProfile    @relation(fields: [venPayId], references: [id])
  cusPayId    Int @unique
  venPayId    Int @unique
  @@schema("public")
}

model Chat{
  id      Int @id @default(autoincrement())
  vendor  Int
  customer  Int
  messages  Message[]
  @@schema("public")
}

model Message{
  id        Int      @id @default(autoincrement())
  sender    Int
  receiver  Int
  text      String
  timestamp DateTime @default(now())
  chat      Chat @relation(fields: [chatId],references: [id])
  chatId    Int  
  @@schema("public")
}